"""
Testing_hackerrank
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from astro import sql as aql
import pandas as pd
import pendulum


@aql.dataframe(task_id="python_1")
def python_1_func():
    import requests
    import pandas as pd
    
    # Set the API endpoint URL for retrieving top story IDs
    top_stories_url = "https://hacker-news.firebaseio.com/v0/topstories.json"
    
    # Send a GET request to retrieve the top story IDs
    response = requests.get(top_stories_url)
    
    # Check if the request was successful
    if response.status_code == 200:
        # Parse the JSON response
        top_story_ids = response.json()
    
        # Retrieve the details of the top 10 stories
        stories = []
        for story_id in top_story_ids[:10]:
            story_url = f"https://hacker-news.firebaseio.com/v0/item/{story_id}.json"
            story_response = requests.get(story_url)
    
            if story_response.status_code == 200:
                story_data = story_response.json()
                story = {
                    "ID": story_id,
                    "Title": story_data.get("title", ""),
                    "Author": story_data.get("by", ""),
                    "Score": story_data.get("score", 0),
                    "URL": story_data.get("url", ""),
                    "Comments": story_data.get("descendants", 0)
                }
                stories.append(story)
    
        # Create a DataFrame from the retrieved stories
        df = pd.DataFrame(stories)
    
        # Print the DataFrame
        print(df)
    else:
        print("Failed to retrieve data from the Hacker News API.")

default_args={
    "owner": "dolece9181@adstam.com,Open in Cloud IDE",
}

@dag(
    default_args=default_args,
    schedule="0 0 * * *",
    start_date=pendulum.from_format("2024-04-05", "YYYY-MM-DD").in_tz("UTC"),
    catchup=False,
    owner_links={
        "dolece9181@adstam.com": "mailto:dolece9181@adstam.com",
        "Open in Cloud IDE": "https://cloud.astronomer.io/clul8ja4c01q201kwopb4u18u/cloud-ide/clul8ntr201t301ivb2a8z64z/clumlx2zl040701ivcff5ugdh",
    },
)
def Testing_hackerrank():
    python_1 = python_1_func()

dag_obj = Testing_hackerrank()
